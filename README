```markdown
# Flask Stock Gap Visualizer

The Flask Stock Gap Visualizer is a web application that allows users to 
visualize stock data and identify gaps between consecutive trading days. 
The application retrieves historical stock data using the Yahoo Finance 
API and displays candlestick charts along with a line chart showing the 
gaps between opening and closing prices.

## Features

- Enter a stock symbol to generate a candlestick chart and a gap line 
chart.
- View the current price of the selected stock.
- Set a target price and receive an alert when the stock price reaches or 
surpasses the target.
- Zoom in on the graph to analyze specific time ranges.
- The UI layout is responsive and user-friendly.

## Getting Started

1. Clone this repository to your local machine.

```bash
git clone https://github.com/your-username/flask-stock-gap-visualizer.git
cd flask-stock-gap-visualizer
```

2. Install the required dependencies using `pip`.

```bash
pip install Flask yfinance pandas plotly flask_sqlalchemy flask_login bcrypt alembic celery celery\[beat\] 
```

3. Run the Flask app.

```bash
python app.py
```

4. Open your web browser and go to `http://127.0.0.1:8000/` to access the 
Stock Gap Visualizer.

## Usage

1. Enter a valid stock symbol (e.g., AAPL, MSFT) in the input field.
2. Click the "Get Current Price" button to fetch and display the current 
price of the selected stock.
3. Enter a target price (optional) to set an alert for reaching the 
specified price.
4. Click the "Generate Chart" button to generate the candlestick and gap 
line charts.
5. Use the "Zoom In" button to zoom in on the graph and analyze specific 
time ranges.
6. The gap line chart displays gaps between consecutive trading days.

## Contributing

Contributions are welcome! If you'd like to contribute to the project, 
please follow these steps:

1. Fork the repository.
2. Create a new branch for your feature or bug fix.
3. Make your changes and test them locally.
4. Commit and push your changes to your fork.
5. Create a pull request to the original repository.

## License

This project is licensed under the [MIT License](LICENSE).

---

**Disclaimer:** This application uses financial data retrieved from Yahoo 
Finance. The data might not be up to date and accurate. Use this 
application for educational purposes only and verify data from reliable 
sources before making financial decisions.
```

Make sure to replace `your-username` in the repository URL with your 
actual GitHub username. Also, don't forget to include any additional 
information or instructions specific to your project that might be 
relevant.

**Migration DB  steps:** 
0 / Automated step e.g.: alembic revision --autogenerate -m "Add leaderboard relationship to User model"
1/ Only do if not doing step 0 skip to 3, Manual Steps: alembic revision -m "create_users_table"
    This will create a file like albemic/versions/1234567890_create_users_table.py.
2/ edit albemic/versions/__generatedfile, def upgrade():, def downgrade():
3/ apply migrations
3a/ upgrade: alembic upgrade head
3b/ downgrade: alembic downgrade -1
4/ view history: alembic history
```

**Celery Cron Job steps:** 
0/ brew install rabbitmq, rabbitmq-plugins enable rabbitmq_management, brew services start rabbitmq
1/ Create celery task under celer/../name_of_task.py
2/ Configure beat_schedule in common.application.config.py
3/ Start: celery beat
4/ Start Celery worker(s): celery worker --loglevel=info
```

** Docker steps:** 
0/ brew install docker && install docker desktop
1/ docker-compose build && docker-compose up

```
